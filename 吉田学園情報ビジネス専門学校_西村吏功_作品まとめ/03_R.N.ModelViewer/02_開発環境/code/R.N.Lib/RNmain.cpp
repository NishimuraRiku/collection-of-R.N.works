//========================================
// 
// R.N.Libのメインの処理
// Author:RIKU NISHIMURA
// 
//========================================
// *** RNmain.cpp ***
//========================================
// _R.N.Lib
#include "RNmain.h"
// >Writable
// >>Mode
#include "../R.N.Writable/mode.h"

//****************************************
// プロトタイプ宣言
//****************************************
//========== *** 取得 ***
// R.N.Libのメイン処理の情報のパラメーター初期値を取得
RNmain InitParameterRNmain(void);

//****************************************
// グローバル変数宣言
//****************************************
RNmain g_RNmain;	// R.N.Libのメイン処理の情報

//================================================================================
//----------|---------------------------------------------------------------------
//==========| cppファイルの占有関数
//----------|---------------------------------------------------------------------
//================================================================================

//============================================================
//--------------------| *** 取得 *** |------------------------
//============================================================
//========================================
// InitParameterRNmain関数 - R.N.Libのメイン処理の情報のパラメーター初期値を取得 -
// Author:RIKU NISHIMURA
//========================================
RNmain InitParameterRNmain(void) 
{
	return{
		MODENONE,	// モード
	};
}

//================================================================================
//----------|---------------------------------------------------------------------
//==========| hファイルの共有関数
//----------|---------------------------------------------------------------------
//================================================================================

//============================================================
//--------------------| *** 基本接続 *** |--------------------
//============================================================
//========================================
// RNInit関数 - R.N.Libの初期化処理 -
// Author:RIKU NISHIMURA
//========================================
void RNInit(HINSTANCE hInstance)
{
	// パラメーター初期化
	g_RNmain = InitParameterRNmain();

	InitSetting();	// 設定
	InitCamera2D();	// カメラ(2D)
	InitCamera3D();	// カメラ(3D)
	InitInput(		// 入力関連の初期化処理
		hInstance,
		*GetWindowHandle());
	InitLight();	// 光
	InitObject3D();	// オブジェクト3D
	InitPhysics();	// 物理関連
	InitPolygon3D();// ポリゴン(3D)
	InitSound(		// サウンド
		*GetWindowHandle());
	InitText();		// テキスト
	InitFade(		// フェード
		INIT_MODE);
}

//========================================
// RNUninit関数 - R.N.Libの終了処理 -
// Author:RIKU NISHIMURA
//========================================
void RNUninit(void)
{
	UninitCamera2D();	// カメラ(2D)
	UninitCamera3D();	// カメラ(3D)
	UninitFade();		// フェード
	UninitInput();		// 入力関連
	UninitObject3D();	// オブジェクト3D
	UninitLight();		// 光
	UninitSetting();	// 設定
	UninitSound();		// サウンド
	UninitText();		// テキスト
}

//========================================
// RNUpdate関数 - R.N.Libの更新処理 -
// Author:RIKU NISHIMURA
//========================================
void RNUpdate(void)
{
	// 当たり判定の線の数を初期化
	InitHitTestLineNum();

	// 線(3D)の数を初期化
	InitLine3DNum();

	// モードに応じた更新処理
	ModeUpdate(g_RNmain.mode);

	UpdateSetting();	// 設定
	UpdateInput();		// 入力関連
	UpdateObject3D();	// オブジェクト3D
	UpdateCamera2D();	// カメラ(2D)
	UpdateCamera3D();	// カメラ(3D)
	UpdateLight();		// 光
	UpdateFade();		// フェード
	DrawHitTestSetUp();	// 当たり判定の描画準備処理
	HitTestSignOut();	// 当たり判定の登録解除処理
}

//========================================
// RNDraw関数 - R.N.Libの描画処理 -
// Author:RIKU NISHIMURA
//========================================
void RNDraw(void)
{
	DrawObject3D();	// オブジェクト3D

	// モードに応じた描画処理
	ModeDraw(g_RNmain.mode);

	DrawHitTest();	// 当たり判定
	DrawText_();	// テキスト
	DrawFade();		// フェード
	DrawPolygon3D();// ポリゴン(3D)
}

//========================================
// RNWindowProc関数 - R.N.Libのウィンドウプロシージャの延長先 -
// Author:RIKU NISHIMURA
//========================================
void RNWindowProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
{
	switch (uMsg)
	{
	case WM_MOUSEWHEEL: // マウスホイールが回された時のメッセージ
		if (HIWORD(wParam) == WHEEL_DELTA)
		{// マウスホイールの回転状態を前回転に設定
			GetInputInfo()->wheelSpin = WHEELSPIN_FRONT;
		}
		else
		{// マウスホイールの回転状態を後回転に設定
			GetInputInfo()->wheelSpin = WHEELSPIN_BACK;
		}

		break;
	}
}

//============================================================
//--------------------| *** 入出力 *** |----------------------
//============================================================
//========================================
// RNLoad関数 - R.N.Libの読み込み処理 -
// Author:RIKU NISHIMURA
//========================================
void RNLoad(void)
{
	LoadFont();			// フォント
	LoadObject3DList();	// オブジェクト3Dリスト
}

//========================================
// RNSave関数 - R.N.Libの書き込み処理 -
// Author:RIKU NISHIMURA
//========================================
void RNSave(void)
{
	
}

//============================================================
//--------------------| *** 取得 *** |------------------------
//============================================================
//========================================
// GetMode関数 - モードの取得 -
// Author:RIKU NISHIMURA
//========================================
MODE GetMode(void)
{
	return g_RNmain.mode;
}

//============================================================
//--------------------| *** 設定 *** |------------------------
//============================================================
//========================================
// SetMode関数 - モードの設定処理 -
//========================================
void SetMode(MODE mode)
{
	// 現在のモードの終了処理
	ModeUninit(g_RNmain.mode);

	// 現在のモードを切り替える
	g_RNmain.mode = mode;

	// 新しいモードの初期化処理
	ModeInit(mode);
}
