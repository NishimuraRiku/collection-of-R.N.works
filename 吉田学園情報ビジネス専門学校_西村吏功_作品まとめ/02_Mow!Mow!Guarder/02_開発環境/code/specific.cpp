//========================================
// 
// 固有処理のまとまり
// Author:RIKU NISHIMURA
// 
//========================================
// *** specific.cpp ***
//========================================
#include "main.h"
#include "chunk.h"
#include "specific.h"
#include "obj_block_00.h"		// OBJ:ブロック	[00]
#include "obj_discharger_00.h"	// OBJ:放電装置	[00]
#include "obj_mirror_00.h"		// OBJ:反射装置	[00]
#include "obj_turret_00.h"		// OBJ:タレット	[00]

//****************************************
// マクロ定義
//****************************************
// ダメージ倍率の下限
// ダメージ倍率の上限
#define DAMAGE_RATE_MIN	(0.8f)
#define DAMAGE_RATE_MAX	(1.2f)

//================================================================================
//----------|---------------------------------------------------------------------
//==========| hファイルの共有関数
//----------|---------------------------------------------------------------------
//================================================================================

//========================================
// fDamageRand関数 - ダメージ倍率を乱数で返す -
//========================================
float fDamageRand(void) 
{
	return DAMAGE_RATE_MIN + fRand(DAMAGE_RATE_MAX - 0.9f);
}

//========================================
// HealUnitAll関数 - 全てのユニットを回復する -
//========================================
void HealUnitAll(void) 
{
	HealAllObj_block_00();		// OBJ:ブロック	[00]
	HealAllObj_discharger_00();	// OBJ:放電装置	[00]
	HealAllObj_mirror_00();		// OBJ:反射装置	[00]
	HealAllObj_turret_00();		// OBJ:タレット	[00]
}